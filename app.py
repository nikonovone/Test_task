# Run this app with `python app.py` and
# visit http://127.0.0.1:8050/ in your web browser.

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

from dash import Dash, dcc, html, Input, Output, dash_table
from utils import *
from plotly.subplots import make_subplots
from functools import partialmethod
from scipy.stats import mstats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ Pandas
pd.DataFrame.head = partialmethod(pd.DataFrame.head, n=2)
pd.options.display.max_rows = 13
pd.options.display.max_columns = 20

app = Dash(__name__)

# –ß—Ç–µ–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞
#df = pd.read_csv("https://media.githubusercontent.com/media/nikonovone/Test_task/master/data.csv", index_col=0)
df = pd.read_csv("data.csv", index_col=0)

font = dict(
    family="Gotham Pro Medium",
    size=12,
)

# –ú–∏–Ω. –∑–∞—Ä–ø–ª–∞—Ç–∞
data = pd.Series(mstats.winsorize(
    df[df['vacancy_salary_from'] != 0]['vacancy_salary_from'], limits=[0, 0.05]))
min_salary = px.histogram(df, x=data, marginal="box", color_discrete_sequence=['#6189c9'])
min_salary.update_layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ 95% –≤–∞–∫–∞–Ω—Å–∏–π',
    xaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±",
    yaxis_title="–í–∞–∫–∞–Ω—Å–∏–∏, —à—Ç",
    font=font,
)

# –ú–∞–∫—Å. –∑–∞—Ä–ø–ª–∞—Ç–∞
data = pd.Series(mstats.winsorize(
    df['vacancy_salary_to'].dropna(), limits=[0, 0.05]))
max_salary = px.histogram(x=data, marginal="box",  color_discrete_sequence=['#6189c9'])
max_salary.update_layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ 95% –≤–∞–∫–∞–Ω—Å–∏–π',
    xaxis_title="–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±",
    yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —à—Ç",
    font=font
)
# –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
data = df['vacancy_offer_education_id']
education_cat = px.histogram(x=data, marginal="box", color_discrete_sequence=['#6189c9'])
education_cat.update_layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö',
    xaxis_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
    yaxis_title="–í–∞–∫–∞–Ω—Å–∏–∏, —à—Ç",
    font=font
)
data = df.groupby('vacancy_offer_education_id')['vacancy_salary_from'].median().sort_values()
education_bar = px.bar(x=data.index, y=data,  color_discrete_sequence=['#6189c9'])
education_bar.update_layout(
    title='–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –º–µ–¥–∏–∞–Ω–Ω—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã –æ—Ç —Ç–∏–ø–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
    xaxis_title="–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ",
    yaxis_title="–ú–µ–¥–∏–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞",
    font=font,
    yaxis={'categoryorder':'total ascending'}
)
education_bar.update_yaxes(range=[32000, 42000])

# –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã
df['vacancy_offer_experience_year_count'].replace(
    [-1, -100], np.nan, inplace=True)
data = df['vacancy_offer_experience_year_count']
offer_experience = px.histogram(x=data, marginal="box",  color_discrete_sequence=['#6189c9'])
offer_experience.update_layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö',
    yaxis_title="–í–∞–∫–∞–Ω—Å–∏–∏, —à—Ç",
    xaxis=dict(
        tickmode='linear',
        title="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã, –ª–µ—Ç",
    ),
    font=font
)

# –ì–æ—Ä–æ–¥–∞
data = pd.Series(mstats.winsorize(df['vacancy_city_id'], limits=[0, 0.05]))
cities = px.histogram(x=data, marginal="box",  color_discrete_sequence=['#6189c9'])
cities.update_layout(
    title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ id –≥–æ—Ä–æ–¥–æ–≤ –≤ 95% –≤–∞–∫–∞–Ω—Å–∏–π',
    xaxis_title="ID –≥–æ—Ä–æ–¥–∞",
    yaxis_title="–í–∞–∫–∞–Ω—Å–∏–∏, —à—Ç",
    font=font
)

# –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
corrs = df.drop(columns=['vacany_company_id', 'vacancy_is_agency',
                         'vacancy_offer_experience_year_id', 'vacancy_city_id']).corr()
correlations =  px.imshow(np.array(np.round(corrs,2)),
                text_auto=True,
                aspect="auto",
                color_continuous_scale=px.colors.sequential.Cividis,
                x=['–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã', ' '],
                y=['–ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç', '–ó–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ', '–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã', '–î–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç—ã',' ']
                )
correlations.update_layout(
    title='–ö–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤',
    font=font
)

# –°—Ä–µ–∑ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º –≥–æ—Ä–æ–¥–æ–≤
#slice_cities = df[df['vacancy_salary_from'] > 10000].groupby(
#'vacancy_city_id')[['vacancy_salary_from', 'vacancy_salary_to']].median()[:10].sort_values(
  #  'vacancy_salary_from', ascending=False)[:10]

app.layout = html.Div(
    children=[
        html.Div(
            children=[
                html.P(children="üê¨", className="header-emoji"),
                html.H1(
                    children="Bimbo –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                    className="header-title"
                ),
                html.P(
                    children="–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã —Å 1995 –≥–æ–¥–∞",
                    className="header-description",
                ),
            ],
            className="header",
        ),
        html.Div(
            children=[
                html.H1(children='–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='min_salary',
                            figure=min_salary,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='max_salary',
                            figure=max_salary,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='education_cat',
                            figure=education_cat,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='education_bar',
                            figure=education_bar,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='offer_experience',
                            figure=offer_experience,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='cities',
                            figure=cities,
                        ),
                    ],
                    className="card",
                ),
                html.Div(
                    children=[
                        dcc.Graph(
                            id='correlations',
                            figure=correlations,
                        ),
                    ],
                    className="card",
                )
            ],
            className="graphs",
        ),
        html.Div(
            children=[


                html.H6(
                    "Change the value in the text box to see callbacks in action!"),
                html.Div([
                    "Input: ",
                    
                    dcc.Input(id='my-input',
                              value='initial value', type='text')
                ]),
                html.Br(),
                html.Div(id='my-output'),


            ]
        )
    ]
)




if __name__ == '__main__':
    app.run_server(debug=True)
